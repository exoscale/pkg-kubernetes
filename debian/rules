#!/usr/bin/make -f
#export DH_VERBOSE=1

# Versioning
include /usr/share/dpkg/pkg-info.mk
export OS_CODENAME := $(shell lsb_release -sc)
export EXOSCALE_VERSION := $(DEB_VERSION)~$(OS_CODENAME)

# Source
TARBALL = kubernetes.tar.gz
#TARBALL_VERSION = $(DEB_VERSION_UPSTREAM)
TARBALL_VERSION=1.21.0-rc.0
TARBALL_URL = https://github.com/kubernetes/kubernetes/releases/download/v$(TARBALL_VERSION)/$(TARBALL)

%:
	dh $@ --with=systemd,bash-completion

DOWNLOAD_INSTALLER := ./download/cluster/get-kube-binaries.sh
$(DOWNLOAD_INSTALLER):
	mkdir -p ./download
	wget --progress=dot:mega "$(TARBALL_URL)" -O "./download/$(TARBALL)"
	tar -C ./download --strip-components=1 -xf "./download/$(TARBALL)" \
	  --wildcards '*/version' '*/cluster/get-kube-binaries.sh'

DOWNLOAD_TARBALL := ./download/server/kubernetes-server-linux-$(DEB_BUILD_ARCH).tar.gz
$(DOWNLOAD_TARBALL): $(DOWNLOAD_INSTALLER)
	KUBERNETES_SERVER_ARCH=$(DEB_BUILD_ARCH) \
	KUBERNETES_CLIENT_ARCH=$(DEB_BUILD_ARCH) \
	KUBERNETES_SKIP_CONFIRM=YES \
	${DOWNLOAD_INSTALLER}

override_dh_auto_build: $(DOWNLOAD_TARBALL)
	tar -xf "${DOWNLOAD_TARBALL}" --wildcards '*/server/bin/*'
	kubernetes/server/bin/kubectl completion bash > kubectl.bash_completion

# Restarting any Kubernetes component is something we want to do manually
override_dh_systemd_start:
	dh_systemd_start --no-restart-after-upgrade --no-restart-on-upgrade

override_dh_gencontrol:
	dh_gencontrol -- -v$(EXOSCALE_VERSION)

override_dh_clean:
	dh_clean
	rm -rf ./kubernetes kubectl.bash_completion
